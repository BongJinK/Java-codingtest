package section6;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class Main9 {
	// ★★★★★★★★★★★★★★★★★
	// 9. 뮤직비디오(결정알고리즘)
	// DVD에는 총 N개의 곡이 들어가는데, DVD에 녹화할 때에는 라이브에서의 순서가 그대로 유지되어야 한다.
	// 순서가 바뀌는 것을 우리의 가수 조영필씨가 매우 싫어한다.
	// 즉, 1번 노래와 5번 노래를 같은 DVD에 녹화하기 위해서는
	// 1번과 5번 사이의 모든 노래도 같은 DVD에 녹화해야 한다.
	// 또한 한 노래를 쪼개서 두 개의 DVD에 녹화하면 안된다.
	// 지니레코드 입장에서는 이 DVD가 팔릴 것인지 확신할 수 없기 때문에
	// 이 사업에 낭비되는 DVD를 가급적 줄이려고 한다.
	// 고민 끝에 지니레코드는 M개의 DVD에 모든 동영상을 녹화하기로 하였다.
	// 이 때 DVD의 크기(녹화 가능한 길이)를 최소로 하려고 한다.
	// 그리고 M개의 DVD는 모두 같은 크기여야 제조원가가 적게 들기 때문에 꼭 같은 크기로 해야 한다.
	// 첫째 줄에 자연수 N(1≤N≤1,000), M(1≤M≤N)이 주어진다.
	// 다음 줄에는 조영필이 라이브에서 부른 순서대로 부른 곡의 길이가 분 단위로(자연수) 주어진다.
	// 부른 곡의 길이는 10,000분을 넘지 않는다고 가정하자.

	// 첫 번째 줄부터 DVD의 최소 용량 크기를 출력하세요.
	// 9 3
	// 1 2 3 4 5 6 7 8 9

	// 결정 알고리즘
	// 최적의 답을 향해 나아감~
	// 결정 알고리즘을 할때 쓰이는 검색 방식 : 이분검색사용
	// 최솟값 : data의 최댓값 [lt]
	// 최댓값 : data의 총합 [rt]

	// Stream 사용
	// Calculating 으로 .count(), .sum(), .min(), .max() 뽑아낼수 있다.
	// 기본 자료형은 지원하지 않으므로 .getAsInt()로 변환 해줘야한다.
	// .sum()은 기본 자료형을 return해줌 [int, long 등]
	// .filter(x -> x%2 == 0) 을 하면 짝수만 필터링
	public static int sol(int n, int m, int[] arr) {
		int answer = 0;
		// Stream 사용 : line.36
		int lt = Arrays.stream(arr).max().getAsInt();
		int rt = Arrays.stream(arr).sum();

		while (lt <= rt) {
			int mid = (lt + rt) / 2;

			if (count(arr, mid) > m)
				lt = mid + 1;
			else {
				answer = mid;
				rt = mid - 1;
			}
		}
		return answer;
	}

	public static int count(int[] arr, int capacity) {
		int cnt = 1;
		int sum = 0;

		for (int x : arr) {
			if (sum + x <= capacity)
				sum += x;
			else {
				cnt++;
				sum = x;
			}
		}
		return cnt;
	}

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

		String[] nm = br.readLine().split(" ");
		String[] tmp = br.readLine().split(" ");

		int n = Integer.parseInt(nm[0]);
		int m = Integer.parseInt(nm[1]);
		int[] arr = new int[n];
		for (int i = 0; i < n; i++)
			arr[i] = Integer.parseInt(tmp[i]);

		System.out.println(sol(n, m, arr));
		br.close();
	}
}
